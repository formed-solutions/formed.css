/**
 * Button component
 * Best applied to anchor and button elements.
 *
 * Stability: unstable (1)
 */

// Dependencies
@import "../config";
@import "../_mixins/borders";
@import "../_mixins/hover";
@import "../_mixins/transitions";
@import "../../node_modules/underscore.css.scss/scss/functions/rem";

/* Main component
   ------------------------------------------------------------------------- */

/**
 * 1. Ensure `box-sizing` is consistent amongst all instances.
 * 2. Prevent button text from being selected.
 * 3. Remove underlines from text on state.
 */

.Button {
  $pv: _rem($button-padding-vertical);
  $ph: _rem($button-padding-horizontal);
  @include border-radius($button-radius);
  @include transition(
    box-shadow $transition-duration $easeInSine
    background-color $transition-duration $easeInOutSine,
    color $transition-duration $transition-timing-function
  );

  display: inline-block;
  position: relative;

  border: none;
  box-sizing: border-box; /* 1 */
  margin: 0;
  padding: #{$pv} #{$ph};

  background: transparent;

  color: $button-color;
  font: $button-font;
  text-align: center;
  text-decoration: none;

  cursor: pointer;
  user-select: none; /* 2 */
  vertical-align: middle;

  will-change: box-shadow;

  &:-moz-focus-innner {
    border: 0;
  }

  // State
  // Placed these includes here as opposed to top of ruleset.  Wanted to keep
  // all state declaration blocks together.
  @include hover {
    background-color: $button-hover-background;
  }

  @include hover-focus-active {
    text-decoration: none; /* 3 */
  }

  &:focus:not(:active) {
    background-color: $button-focus-background;
  }

  &:active {
    background-color: $button-active-background;
  }

  &:disabled,
  &.is-disabled {
    @include elem-hover-focus {
      background-color: transparent;
    }

    opacity: $button-disabled-opacity;

    cursor: default;
  }
}

/**
 * Modifier: primary button.
 */

.Button--primary {
  color: $button-primary-color;
}

/**
 * Modifier: secondary buttons.
 */

.Button--accent {
  color: $theme-accent;
}

/**
 * Modifier: call to action buttons.
 */

.Button--ctab {
  @include shadow-level(2);

  background-color: $button-background;

  &:active,
  &:focus:not(:active) {
    background-color: $button-active-background;
  }

  &:active {
    @include shadow-level(4);
  }

  &:focus:not(:active) {
    @include shadow-level(6);
  }

  &.Button--primary.Button--primary {
    background-color: $theme-primary;

    color: $theme-primary-contrast;
  }

  &.Button--accent.Button--accent {
    background-color: $theme-accent;

    color: $theme-accent-contrast;
  }

  // Use cascade and declare twice to up specificity so disabled state
  // takes over.
  &[disabled][disabled],
  &.is-disabled.is-disabled {
    box-shadow: none;
    background-color: rgba(0, 0, 0, 0.26);

    color: rgba(0, 0, 0, 0.43);
  }
}

/**
 * Modifier: icon button.
 * Buttons represented by a icon.
 */

%button-icon {
  @include border-radius(50%);

  overflow: hidden;

  padding: 0;

  line-height: normal;

  .Button-icon {
    bottom: 50%;
    position: absolute;
    top: 50%;
  }
}

.Button--icon,
.Button--iconSmall {
  $size: _rem($line-height-base * 1.5);
  @extend %button-icon;

  height: $size;
  min-width: $size;
  width: $size;

  .Button-icon {
    $size: 1.25rem;
    $translate: -($size * 0.5);

    transform: translate($translate, $translate);

    height: $size;
    width: $size;
  }
}

.Button--iconSmall {
  $size: 1.50rem;
  @extend %button-icon;

  height: $size;
  min-width: $size;
  width: $size;

  .Button-icon {
    $size: 1rem;
    $translate: -($size * 0.5);

    transform: translate($translate, $translate);

    height: $size;
    width: $size;
  }
}
